package top.codegzy.mybluetoothapp;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class MainActivity2 extends AppCompatActivity {

    //定义组件
    TextView statusLabel;
    Button btnConnect, btnSend, btnQuit,btnReturn;
    Button btnParamRead,btnParamWrite,btnRecordWrite;
    EditText etReceived, etSend, etSend2;

    //device var
    private BluetoothAdapter mBluetoothAdapter = null;

    private BluetoothSocket btSocket = null;

    private OutputStream outStream = null;

    //这条是蓝牙串口通用的UUID，不要更改
    private static final UUID MY_UUID =
            UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    private ReceiveThread rThread = null;  //数据接收线程

    //接收到的字符串
    String ReceiveData= null;

    MyHandler handler;

    // rsc id 数组
    int rscIdArray[] = new int[]{11000,11001,11002,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,46000,46001,46002,46003,46004,46500,46501,11024,11025,11500,13000,13001,13002,13003,13005,13006,13007,13008,13010,13011,13012,13013,13015,13016,13017,13018,13020,13021,13022,13023,13025,13026,13027,13028,13030,13031,13032,13033,13035,13036,13037,13038,13040,13041,13042,13043,13045,13046,13047,13048,13050,13051,13052,13053,13055,13056,13057,13058,13060,13061,13062,13063,13065,13066,13067,13068,13070,13071,13072,13073,13075,13076,13077,13078,13080,13081,13082,13083,13085,13086,13087,13088,13090,13091,13092,13093,13095,13096,13097,13098,13100,13101,13102,13103,13105,13106,13107,13108,13110,13111,13112,13113,13115,13116,13117,13118,13120,13121,13122,13123,13125,13126,13127,13128,13130,13131,13132,13133,13135,13136,13137,13138,13140,13141,13142,13143,13145,13146,13147,13148,13150,13151,13152,13153,13155,13156,13157,13158,13160,13161,13162,13163,13165,13166,13167,13168,13170,13171,13172,13173,13175,13176,13177,13178,13180,13181,13182,13183,13185,13186,13187,13188,13190,13191,13192,13193,13195,13196,13197,13198,13200,13201,13202,13203,13205,13206,13207,13208,13210,13211,13212,13213,13215,13216,13217,13218,13220,13221,13222,13223,13225,13226,13227,13228,13230,13231,13232,13233,13235,13236,13237,13238,13240,13241,13242,13243,13245,13246,13247,13248,13250,13251,13252,13253,13255,13256,13257,13258,13260,13261,13262,13263,13265,13266,13267,13268,13270,13271,13272,13273,13275,13276,13277,13278,13280,13281,13282,13283,13285,13286,13287,13288,13290,13291,13292,13293,13295,13296,13297,13298,13300,13301,13302,13303,13305,13306,13307,13308,13310,13311,13312,13313,13315,13316,13317,13318,13320,13321,13322,13323,13325,13326,13327,13328,13330,13331,13332,13333,13335,13336,13337,13338,13340,13341,13342,13343,13345,13346,13347,13348,13350,13351,13352,13353,13355,13356,13357,13358,13360,13361,13362,13363,13365,13366,13367,13368,13370,13371,13372,13373,13375,13376,13377,13378,13380,13381,13382,13383,13385,13386,13387,13388,13390,13391,13392,13393,13395,13396,13397,13398,13400,13401,13402,13403,13405,13406,13407,13408,13410,13411,13412,13413,13415,13416,13417,13418,13420,13421,13422,13423,13425,13426,13427,13428,13430,13431,13432,13433,13435,13436,13437,13438,13440,13441,13442,13443,13445,13446,13447,13448,13450,13451,13452,13453,13455,13456,13457,13458,13460,13461,13462,13463,13465,13466,13467,13468,13470,13471,13472,13473,13475,13476,13477,13478,13480,13481,13482,13483,13485,13486,13487,13488,13490,13491,13492,13493,13495,13496,13497,13498,13500,13501,13502,13503,13505,13506,13507,13508,13510,13511,13512,13513,13515,13516,13517,13518,13520,13521,13522,13523,13525,13526,13527,13528,13530,13531,13532,13533,13535,13536,13537,13538,13540,13541,13542,13543,13545,13546,13547,13548,13550,13551,13552,13553,13555,13556,13557,13558,13560,13561,13562,13563,13565,13566,13567,13568,13570,13571,13572,13573,13575,13576,13577,13578,13580,13581,13582,13583,13585,13586,13587,13588,13590,13591,13592,13593,13595,13596,13597,13598,13600,13601,13602,13603,13605,13606,13607,13608,13610,13611,13612,13613,13615,13616,13617,13618,13620,13621,13622,13623,13625,13626,13627,13628,13630,13631,13632,13633,13635,13636,13637,13638,13640,13641,13642,13643,13645,13646,13647,13648,13650,13651,13652,13653,13655,13656,13657,13658,13660,13661,13662,13663,13665,13666,13667,13668,13670,13671,13672,13673,13675,13676,13677,13678,13680,13681,13682,13683,13685,13686,13687,13688,13690,13691,13692,13693,13695,13696,13697,13698,13700,13701,13702,13703,13705,13706,13707,13708,13710,13711,13712,13713,13715,13716,13717,13718,13720,13721,13722,13723,13725,13726,13727,13728,13730,13731,13732,13733,13735,13736,13737,13738,13740,13741,13742,13743,13745,13746,13747,13748,13762,13775,13776,13750,13751,13752,13753,13754,13755,13756,13757,13758,13759,13780,13781,13782,13783,13784,13785,13786,13787,13788,13789,13790,13791,13792,13793,13794,13795,13796,13797,14003,14006,14028,14014,14015,14016,14018,14020,14022,14023,14024,14025,14026,14027,14029,14042,14043,14044,14045,14533,15005,19000,19001,19002,19003,19004,19005,19006,19007,19008,19009,19010,19011,19012,19013,19014,19015,19016,19017,19018,19019,19020,19021,19022,19023,19024,19025,19026,19027,19028,19029,19030,19031,19032,19033,19034,19035,19036,19037,19038,19039,19040,19041,19042,19043,19044,19045,19046,19047,19048,19049,19050,19051,19052,19053,19054,19055,19056,19057,19058,19059,19060,19061,19062,19063,19064,19065,19066,19067,19068,19069,19070,19071,19072,19073,19074,19075,19076,19077,19078,19079,19080,19081,19082,19083,19084,19085,19086,19087,19088,19089,19090,19091,19092,19093,19094,19095,19096,20040,20041,20106,20109,22800,22802,22804,22806,22807,22808,22809,22810,22811,22812,22815,22816,22817,24000,24001,24002,24003,24004,24005,24006,24007,24008,24009,24010,24011,24012,24013,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24027,24028,24029,24030,24031,24032,24033,24034,24035,24036,24037,24038,24039,24040,24041,24042,24043,24044,24045,24046,24047,24048,24049,24050,24051,24052,24053,24054,24055,24056,24057,24058,24059,24060,24061,24062,24063,24064,24065,24066,24067,24068,24069,24070,24071,24072,24073,24074,24075,24076,24077,24078,24079,24080,24081,24082,24083,24084,24085,24086,24087,24097,24098,24099,24100,24101,24102,24107,24108,24109,24110,24111,24112,24113,24114,24115,24116,24117,24118,24119,24120,24121,24122,24123,24124,24125,24126,24127,24128,24129,24130,24131,24132,24133,24134,24135,24136,24137,24138,24139,24140,24141,24142,24143,24144,24145,24148,24149,24150,24151,24152,24153,24154,24155,24156,24157,24158,24159,24160,24161,24162,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24178,24179,24180,24181,24182,24183,24184,24185,24186,24187,24193,24194,24195,24196,24197,24198,24200,24201,24202,24203,24204,24205,24206,24207,24208,24209,24210,24211,24212,24213,24214,24215,24216,24217,24218,24219,24220,24221,24222,24223,24224,24225,26000,26001,26002,26003,27000,27001,27002,27003,27004,27010,27011,27012,27013,27014,27015,27016,27017,27018,27019,27020,27021,27022,27023,27024,27025,27026,27027,27028,27029,27030,27031,27032,27033,27034,27035,27036,27037,27038,27039,27040,27050,27051,27052,27053,27054,27055,27056,27057,27058,27059,27060,27061,27062,27063,27064,27065,27066,27067,27068,27069,27070,27071,27072,27073,27074,27075,27076,27077,27078,27079,27080,27090,27091,27092,27093,27094,27095,27096,27097,27098,27099,27100,27101,27102,27103,27104,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27117,27118,27119,27120,27130,27131,27132,27133,27134,27135,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27146,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27159,27160,27170,27171,27172,27173,27174,27175,27176,27177,27178,27179,27180,27181,27182,27183,27184,27185,27186,27187,27188,27189,27190,27191,27192,27193,27194,27195,27196,27197,27198,27199,27200,27210,27211,27212,27213,27214,27215,27216,27217,27218,27219,27220,27221,27222,27223,27224,27225,27226,27227,27228,27229,27230,27231,27232,27233,27234,27235,27236,27237,27238,27239,27240,27260,27261,27262,27263,27264,27265,27266,27267,27268,27269,27270,27271,27272,27273,27274,27275,27276,27277,27278,27279,27280,27281,27282,27283,27284,27285,27286,27287,27288,27289,27290,27300,27301,27302,27303,27304,27305,27306,27307,27308,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27800,27801,27802,27803,27804,27805,27806,27807,27808,27809,27810,27811,27812,27813,27814,27815,27816,27817,27818,27819,27820,27821,27822,27823,27824,27825,27826,27827,27828,27829,27830,27840,27841,27842,27843,27844,27845,27846,27847,27848,27849,27850,27851,27852,27853,27854,27855,27856,27857,27858,27859,27860,27861,27862,27863,27864,27865,27866,27867,27868,27869,27870,27880,27881,27882,27883,27884,27885,27886,27887,27888,27889,27890,27891,27892,27893,27894,27895,27896,27897,27898,27899,27900,27901,27902,27903,27904,27905,27906,27907,27908,27909,27910,27920,27921,27922,27923,27924,27925,27926,27927,27928,27929,27930,27931,27932,27933,27934,27935,27936,27937,27938,27939,27940,27941,27942,27943,27944,27945,27946,27947,27948,27949,27950,28003,28004,28011,28012,28502,29500,29501,29502,29503,29504,29505,29506,29507,29508,29509,29510,29600,29601,29602,29603,29604,29605,29606,29607,29608,29609,29660,29700,29701,29702,29703,29704,29705,29706,29707,29708,29721,29749,29750,29751,29752,30000,30001,30002,30003,30004,30006,30007,30008,30009,30015,30018,30022,30033,30035,30042,30047,30050,30051,30055,30057,30060,30066,30075,30076,30077,30079,30090,32053,32838,32839,32840,32841,32945,38001,38184,41000,41001,41002,41003,41004,41005,41006,41007,41008,41009,41010,41011,41012,41013,41014,41015,41016,41017,41018,41019,41020,41021,41022,41023,41024,41025,41026,41027,41028,41029,41030,41031,41032,41033,41034,41035,41036,41037,41038,41039,41040,41041,41042,41043,41044,41045,41046,41047,41048,41049,41050,41051,41052,41053,41054,41055,41056,41057,41058,41059,41060,41061,41062,41063,41064,41065,41066,41067,41068,41069,41070,41071,41072,41073,41074,41075,41076,41077,41078,41079,41080,41081,41082,41083,41084,41085,41086,41087,41088,41089,41090,41091,41092,41093,41094,41095,41096,41097,41098,41099,41100,41101,41120,41129,41130,41131,41132,41133,41134,41135,41200,41201,41202,41203,41204,41207,41212,41213,41216,41400,41401,41402,41403,41404,41405,41406,41407,41408,41409,41410,41411,41412,41413,41414,41415,41416,41417,41418,41420,41421,41422,41423,41424,41425,41426,41427,41428,41429,41430,41431,41432,41433,41434,41435,41437,41438,41439,41440,41447,41450,41452,41453,41454,41455,41458,41464,41465,41470,41471,41472,41473,41474,41475,41476,41477,41478,41483,41484,41485,41486,41487,41488,41489,41491,41492,41493,41494,41495,41496,41497,41498,41910,41911,41912,41913,41920,41932,41933,41934,41935,42000,42001,42002,42003,42004,42005,42006,42007,42008,43000,43001,43002,43003,43004,43005,43006,43007,43008,43009,43010,43011,43012,43013,43014,43015,44016,44018,44021,61000,61002,61003,61004,61006,61007,61008,61009,64000,64001,64002,50400,50401,50402,50403,50404,50405,50406,50407,50408,50409,50410,50411,50412,50413,50414,50415,50416,50417,50418,50419,50420,50421,50422,50423,50424,50425,50426,50427,50428,50429,50430,50431,50432,50433,50434,1000,1001,1002,1003,1004,1005,1006,1009,1010,1011,1013,1014,1015,1016,1017,3290,3150,3157,3443,3163,3489,3497,3498,3499,3507,3508,3539,3609,3612,3613,3614,3615,3616,3618,3619,3620,3621,3622,3623,3625,3626,3627,3628,3629,3630,3631,3633,3634,3635,3636,3656,3657,3659,3660,3661,3662,3663,3665,3671,4005,4021,4022,4023,4024,4025,4026,4063,4067,4080,4088,4089,4091,4092,4094,4095,4096,4099,4100,4101,4104,4106,4102,4108,4109,4110,4113,4117,4118,4119,4126,4131,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4156,4158,4159,4160,4168,4161,4163,4164,4165,4166,4167,4170,4171,4172,4173,4174,4175,4178,4533,4564,4565,4566,4567,4568,4569,4570,4571,4574,4575,4162,6000,6521,6528,6532,6534,6051,6052,6053,6054,6063,6064,6067,6068,6073,6087,6088,6101,6102,6107,6108,6109,6112,6119,6120,6121,6122,6123,6124,6125,6127,6128,6130,6131,6136,6137,6149,6213,6214,6216,6217,6218,6221,6222,6223,6224,6225,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6247,6248,6249,6619,6620,6622,6624,6629,6630,6725,6726,6727,6745,6755,7009,7010,7011,7012,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109,7110,7111,7112,7113,7114,7115,7116,7117,7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131,7132,7133,7134,7135,7139,7140,7141,7145,7146,7147,7151,7152,7153,7157,7158,7159,7163,7164,7165,7169,7170,7171,7172,7173,7174,7175,7176,7179,7180,7182,7183,7184,7185,7186,7187,7188,7189,7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259,7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270,7271,7272,7273,7274,7275,7276,7277,7278,7279,7280,7281,7282,7283,7284,7285,7286,7287,7288,7289,7290,7291,7292,7293,7294,7295,7296,7297,7298,7299,7300,7301,7302,7303,7304,7305,7306,7307,7308,7309,7310,7311,7312,7313,7314,7315,7316,7317,7318,7319,7320,7321,7322,7323,7324,7325,7326,7327,7328,7329,7330,7331,7332,7333,7334,7335,7336,7337,7338,7339,7340,7341,7342,7343,7344,7345,7346,7347,7348,7349,7350,7351,7352,7353,7354,7355,7356,7357,7358,7359,7360,7361,7362,7363,7364,7365,7366,7367,7368,7369,7370,7371,7372,7373,7374,7375,7376,7377,7378,7379,7380,7381,7382,7383,7384,7385,7386,7387,7388,7389,7390,7391,7392,7393,7394,7395,7396,7397,7398,7399,7400,7401,7402,7403,7404,7405,7406,7407,7408,7409,7410,7411,7412,7413,7414,7415,7416,7417,7418,7419,7420,7421,7422,7423,7424,7425,7426,7427,7428,7429,7430,7431,7432,7433,7434,7435,7436,7437,7438,7439,7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7473,7474,7475,7476,7504,7505,7595,7600,7900,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8017,8018,8019,8020,8021,8023,8024,8025,8026,8027,8028,8030,8031,8034,8038,8039,8041,8042,8043,8044,8045,8048,8055,8067,9501,9502,50435,50436,50437,50438,50439,50440,50441,50442,50443,50444,50445,50446,50447,50448,50449,50450,50451,50452,50453,50454,50455,50456,50457,50458,50459,50460,50461,50462,50463,50464,50465,50466,50467,50468};


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main2);
        //首先调用初始化函数
        Init();
        InitBluetooth();

        handler = new MyHandler();

        btnConnect.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                String address = getIntent().getStringExtra("BluetoothAddress");

                if (address != null || address.equals("")) {
                    //创建连接
                    new ConnectTask().execute(address);
                }

            }
        });

        btnQuit.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub

                if (btSocket != null) {
                    try {
                        btSocket.close();
                        btSocket = null;
                        if (rThread != null) {
                            rThread.join();
                        }
                        statusLabel.setText("当前连接已断开");
//						etReceived.setText("");
                    } catch (IOException e) {

                        e.printStackTrace();
                    } catch (InterruptedException e) {

                        e.printStackTrace();
                    }
                }


            }
        });

        btnSend.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                new SendInfoTask().execute(CommonDefine.MESSAGE_SEND_FLAG,etSend.getText().toString());

            }
        });

        btnReturn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

//        // パラメータ読込
//        btnParamRead.setOnClickListener(new View.OnClickListener() {
//
//            @Override
//            public void onClick(View v) {
//
//                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 35 C2 D8 03";
//
//
//                // 读乘务员code
//                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 4E 48 39 03";
//                // 应答 DIG_DRVR_CODE , 4 = 0x00000003 ; // 3
//                // 00 0F 62 B9 C8 81 00 01 4E 48 04 00 00 00 03
//
//
//
//
//
//                // 都VOI_RSV6_TTS_TEXT资源
//                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 34 01 9A 03";
////                byte[] dat = new byte[]{0x02,0x24,0x00,0x06,0x00,0x01,0x34,0x01};
//
//                int maxArraySize = 600;
//                int dataLen = maxArraySize-2;
//
//                byte[] dat = new byte[maxArraySize];
//                dat[0] = 0x02;
//                dat[1] = 0x24;
//
//
//                dat[2] = (byte) ( (dataLen >> 8) & 0xff );
//                dat[3] = (byte) ( (dataLen) & 0xff );
//
//                Log.d("sch", "dataLen=" + dataLen);
//
//                // リソース数
////                dat[4] = 0x07;
////                dat[5] = (byte)0xFD;
//
//                int rscNum = (maxArraySize-6)/2;
//                dat[5] = (byte) ( (rscNum) & 0xff );
//                dat[4] = (byte) ( (rscNum >> 8) & 0xff );
//
//                Log.d("sch", "rscNum=" + rscNum);
//
//                int index = 0;
//                for (int i=6;i<maxArraySize;){
//
//                    dat[i] = (byte) ( (rscIdArray[index] >> 8) & 0xff );
//                    dat[i+1] = (byte) ( (rscIdArray[index]) & 0xff );
//
//                    i += 2;
//                    index ++;
//                }
//
//
//                // 读取TIME
//                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 42 7C 11 03";
//                //byte[] dat = new byte[]{0x02,0x24,0x00,0x06,0x00,0x01,0x42,0x7C};
//
//
//
//                int comSeq = 7;
//                int ctlId = 0X0005;
//
////                String info = MakeFrame(dat, dat.length, comSeq, ctlId);
//
//                new SendInfoTask().execute(CommonDefine.PARAM_READ_SEND_FLAG,MakeFrame(dat, dat.length, comSeq, ctlId));
//            }
//        });

        // パラメータ書き込み

//        コマンド名	Byte数
//        コマンドコード	2
//        データ長	2
//        パラメータ版数	4
//        リソース数	2
//        リソース１ID	2
//        リソース１データ長	1
//        リソース１データ	N
//        …
//        リソースN ID	2
//        リソースN データ長	1
//        リソースN データ	N

        // パラメータ読込
        btnParamRead.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 35 C2 D8 03";


                // 读乘务员code
                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 4E 48 39 03";
                // 应答 DIG_DRVR_CODE , 4 = 0x00000003 ; // 3
                // 00 0F 62 B9 C8 81 00 01 4E 48 04 00 00 00 03

                // 都VOI_RSV6_TTS_TEXT资源
                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 34 01 9A 03";
//                byte[] dat = new byte[]{0x02,0x24,0x00,0x06,0x00,0x01,0x34,0x01};



//                int rscIdArray2[] = new int[]{6128,13003,13005,13006,13007,6248, 65000, 14014,20040,20041,20106,22806,22807,41416,41417,41418,41422,41452,41453,41455,41458};
                int rscIdArray2[] = new int[]{6128,13003,13005, 27980,27981, 13006,13007,6248};
                //int rscIdArray2[] = new int[]{6128,13003};

                int maxArraySize = rscIdArray2.length*2+2+2+2; // リソース数　＋　データ長　+　コマンドコード

                int dataLen = maxArraySize - 2; //maxArraySize-2;(0224包含自己)

                byte[] dat = new byte[maxArraySize];
                dat[0] = 0x02;
                dat[1] = 0x24;


                dat[2] = (byte) ( (dataLen >> 8) & 0xff );
                dat[3] = (byte) ( (dataLen) & 0xff );

                Log.d("sch", "dataLen=" + dataLen);

                // リソース数
//                dat[4] = 0x07;
//                dat[5] = (byte)0xFD;

                int rscNum = (maxArraySize-6)/2;
                dat[5] = (byte) ( (rscNum) & 0xff );
                dat[4] = (byte) ( (rscNum >> 8) & 0xff );

                Log.d("sch", "rscNum=" + rscNum);

                int index = 0;
                for (int i=6;i<maxArraySize;){

                    dat[i] = (byte) ( (rscIdArray2[index] >> 8) & 0xff );
                    dat[i+1] = (byte) ( (rscIdArray2[index]) & 0xff );

                    i += 2;
                    index ++;
                }


                // 读取TIME
                //String info = "02 00 11 FF EF 00 00 00 00 00 00 00 05 02 24 00 06 00 01 42 7C 11 03";
                //byte[] dat = new byte[]{0x02,0x24,0x00,0x06,0x00,0x01,0x42,0x7C};



                int comSeq = 7;
                int ctlId = 0X0005;

//                String info = MakeFrame(dat, dat.length, comSeq, ctlId);

                new SendInfoTask().execute(CommonDefine.PARAM_READ_SEND_FLAG,MakeFrame(dat, dat.length, comSeq, ctlId));
            }
        });

//        btnParamWrite.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//
//                // 写乘务员code   目标设定06
//                // 02 00 1A FF E6 00 00 00 00 00 00 00 05 02 26 00 0F 00 00 00 00 00 01 4E 48 04 00 00 00 06 24 03
//                // data部  02 26         00 10           00 00 00 00          00 01     4E 48 00  04 00 00 00 06
//
//                // 仿照写的代码
////                byte[] dat = new byte[]{0x02,0x23, 0x00,0x10, 0x00,0x00,0x00,0x00,0x00,0x01,(byte)0x4E,0x48,0x00,0x04,0x00,0x00,0x00,0x06};
//
//                //
//                // 02 26 00 47  00 00 00 00 00 01 34 01 3C 11 80 9A E4 BF A1 E7 95 B0 E5 B8  B8 E3  81 8C E7 99  BA  E7  94  9F E3 81 97 E3 81 BE  E3  81 97 E3 81 9F 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9E 03
//
//                byte[] dat = new byte[]{0x02,0x23,0x00,0x47,0x00,0x00,0x00,0x00,0x00,0x01,0x34,0x01,
//                        0x3C,0x11,(byte)0x80,(byte)0x9A,(byte)0xE4,(byte)0xBF,(byte)0xA1,(byte)0xE7,(byte)0x95,(byte)0xB0,(byte)0xE5,(byte)0xB8,(byte)0xB8,(byte)0xE3,(byte)0x81,
//                        (byte)0x8C,(byte)0xE7,(byte)0x99,(byte)0xBA,(byte)0xE7,(byte)0x94,(byte)0x9F,(byte)0xE3,(byte)0x81,(byte)0x97,(byte)0xE3,(byte)0x81,(byte)0xBE,(byte)0xE3,(byte)0x81,
//                        (byte)0x97,(byte)0xE3,(byte)0x81,(byte)0x9F,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                        0x00,0x00,0x00,0x00,(byte)0x9E,0x03};
//
//                int comSeq = 1;
//                int ctlId = 0X0005;
//
////                String info = MakeFrame(dat, datSize, comSeq, ctlId);
//
//                new SendInfoTask().execute(CommonDefine.PARAM_WRITE_SEND_FLAG,MakeFrame(dat, dat.length, comSeq, ctlId));
//
//            }
//        });

        btnParamWrite.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // 写乘务员code   目标设定06
                // 02 00 1A FF E6 00 00 00 00 00 00 00 05 02 26 00 0F 00 00 00 00 00 01 4E 48 04 00 00 00 06 24 03
                // data部  02 26         00 10           00 00 00 00          00 01     4E 48 00  04 00 00 00 06

                // 仿照写的代码
//                byte[] dat = new byte[]{0x02,0x23, 0x00,0x10, 0x00,0x00,0x00,0x00,0x00,0x01,(byte)0x4E,0x48,0x00,0x04,0x00,0x00,0x00,0x06};

                //
                // 02 26 00 47  00 00 00 00 00 01 34 01 3C 11 80 9A E4 BF A1 E7 95 B0 E5 B8  B8 E3  81 8C E7 99  BA  E7  94  9F E3 81 97 E3 81 BE  E3  81 97 E3 81 9F 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9E 03

                // 6个rsc 重复3次，并追加2个rsc，共20个rsc测试 0x1223帧
//                6128,1=1;
//                13003,1=1;
//                13005,1=1;
//                13006,1=1;
//                13007,1=1;
//                6248,1=1;

//                byte[] dat = new byte[]{(byte)0x12,(byte)0x23,(byte)0x01,(byte)0x1B,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x14,(byte)0x17,(byte)0xf0,(byte)0x02,
//                        (byte)0x3f,(byte)0xb2,(byte)0x32,(byte)0xcb,(byte)0x3c,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x32,(byte)0xcd,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,(byte)0xce,(byte)0x02,(byte)0x00,
//                        (byte)0x01,(byte)0x32,(byte)0xcf,(byte)0x01,(byte)0x1e,(byte)0x18,(byte)0x68,(byte)0x04,(byte)0x00,
//                        (byte)0x00,(byte)0x01,(byte)0xf4,(byte)0x17,(byte)0xf0,(byte)0x02,(byte)0x3f,(byte)0xb2,(byte)0x32,
//                        (byte)0xcb,(byte)0x3c,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x32,
//                        (byte)0xcd,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,(byte)0xce,(byte)0x02,(byte)0x00,(byte)0x01,
//                        (byte)0x32,(byte)0xcf,(byte)0x01,(byte)0x1e,(byte)0x18,(byte)0x68,(byte)0x04,(byte)0x00,(byte)0x00,
//                        (byte)0x01,(byte)0xf4,(byte)0x17,(byte)0xf0,(byte)0x02,(byte)0x3f,(byte)0xb2,(byte)0x32,(byte)0xcb,
//                        (byte)0x3c,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x32,(byte)0xcd,
//                        (byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,(byte)0xce,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,
//                        (byte)0xcf,(byte)0x01,(byte)0x05,(byte)0x18,(byte)0x68,(byte)0x04,(byte)0x00,(byte)0x00,(byte)0x01,
//                        (byte)0xf4,(byte)0x32,(byte)0xcd,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,(byte)0xce,(byte)0x02,
//                        (byte)0x00,(byte)0x01};


                // 6个 rsc 0x1223 没有重复
                byte[] dat = new byte[]{(byte)0x12,(byte)0x23,(byte)0x00,(byte)0x5f,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x14,(byte)0x17,(byte)0xf0,(byte)0x02,
                        (byte)0x3f,(byte)0xb2,(byte)0x32,(byte)0xcb,(byte)0x3c,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
                        (byte)0x32,(byte)0xcd,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,(byte)0xce,(byte)0x02,(byte)0x00,
                        (byte)0x01,(byte)0x32,(byte)0xcf,(byte)0x01,(byte)0x1e,(byte)0x18,(byte)0x68,(byte)0x04,(byte)0x00,
                        (byte)0x00,(byte)0x01,(byte)0xf4};


                // 6个 rsc 0x1223 包含一个错误的rscid  9600
//                byte[] dat = new byte[]{(byte)0x12,(byte)0x23,(byte)0x00,(byte)0x5f,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x14,(byte)0x17,(byte)0xf0,(byte)0x02,
//                        (byte)0x3f,(byte)0xb2,(byte)0x32,(byte)0xcb,(byte)0x3c,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,
//                        (byte)0x25,(byte)0x80,(byte)0x02,(byte)0x00,(byte)0x01,(byte)0x32,(byte)0xce,(byte)0x02,(byte)0x00,
//                        (byte)0x01,(byte)0x32,(byte)0xcf,(byte)0x01,(byte)0x1e,(byte)0x18,(byte)0x68,(byte)0x04,(byte)0x00,
//                        (byte)0x00,(byte)0x01,(byte)0xf4};

                // 1个 rsc 0x1223 只有一个错误的rscid  65000
//                byte[] dat = new byte[]{(byte)0x12,(byte)0x23,(byte)0x00,(byte)0x0B,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0xfd,(byte)0xe8,(byte)0x02,(byte)0x00,(byte)0x01};

//                // 1个 rsc 0x0223 只有一个错误的rscid  65000
//                byte[] dat = new byte[]{(byte)0x02,(byte)0x23,(byte)0x00,(byte)0x0D,(byte)0x00,(byte)0x00,
//                        (byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01,(byte)0xfd,(byte)0xe8,(byte)0x02,(byte)0x00,(byte)0x01};



//                byte[] dat = new byte[]{0x02,0x23,0x00,0x47,0x00,0x00,0x00,0x00,0x00,0x01,0x34,0x01,
//                        0x3C,0x11,(byte)0x80,(byte)0x9A,(byte)0xE4,(byte)0xBF,(byte)0xA1,(byte)0xE7,(byte)0x95,(byte)0xB0,(byte)0xE5,(byte)0xB8,(byte)0xB8,(byte)0xE3,(byte)0x81,
//                        (byte)0x8C,(byte)0xE7,(byte)0x99,(byte)0xBA,(byte)0xE7,(byte)0x94,(byte)0x9F,(byte)0xE3,(byte)0x81,(byte)0x97,(byte)0xE3,(byte)0x81,(byte)0xBE,(byte)0xE3,(byte)0x81,
//                        (byte)0x97,(byte)0xE3,(byte)0x81,(byte)0x9F,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//                        0x00,0x00,0x00,0x00,(byte)0x9E,0x03};
//                byte[] dat = new byte[]{0x02,0x23, 0x00,0x10, 0x00,0x00,0x00,0x00,0x00,0x01,(byte)0x4E,0x48,0x00,0x04,0x00,0x00,0x00,0x06};

                int comSeq = 14;
                int ctlId = 0X0005;

//                String info = MakeFrame(dat, datSize, comSeq, ctlId);

                new SendInfoTask().execute(CommonDefine.PARAM_WRITE_SEND_FLAG,MakeFrame(dat, dat.length, comSeq, ctlId));

            }
        });

        // レコード書き込み
        btnRecordWrite.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // ALC
                // String info = "02 00 25 ff db 00 00 00 00 00 00 00 05 03 00 00 01 02 c5 00 14 00 00 00 03 00 00 01 c6 00 00 04 bc 00 00 00 7c 62 a1 4d 17 b0 03";



//                byte[] dat = new byte[]{0x03,0x00,0x00,0x01,0x03,(byte)0xc5,0x00,(byte)0x14,0x00,0x00,0x00,0x03,
//                        0x00,0x00,0x01,(byte)0xc6,0x00,0x00,0x04,(byte)0xbc,0x00,0x00,0x00,0x7c,0x62,(byte)0xa1,0x4d,0x17};
//
//                int comSeq = 22;
//                int ctlId = 0X0005;
//                new SendInfoTask().execute(CommonDefine.RECORD_SEND_FLAG, MakeFrame(dat, dat.length, comSeq, ctlId));

                //byte[] dat = new byte[]{0x03,0x00,0x00,0x01,0x00,(byte)0xc5,0x00,(byte)0xf5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,(byte)0xc6,0x00,0x00,0x04,(byte)0xbc,0x00,0x00,0x00,0x7c,0x62,(byte)0xa1,0x4d,0x17};

                int x = 350;

                for (int i=0;i<1;i++) {
                    // 正常
//                    byte[] dat = new byte[]{0x03, 0x00, 0x00, 0x03, 0x03, (byte) 0xc5, 0x00, (byte) 0x14, 0x00,
//                            0x00, 0x00, 0x03, 0x00, 0x00, 0x01, (byte) 0xc6, 0x00, 0x00, 0x04,
//                            (byte) 0xbc, 0x00, 0x00, 0x00, 0x7c, 0x62, (byte) 0xa1, 0x4d, 0x17, 0x01, (byte) 0xc5, 0x00,
//                            (byte) 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, (byte) 0xc6, 0x00, 0x00, 0x04, (byte) 0xbc,
//                            0x00, 0x00, 0x00, 0x7c, 0x62, (byte) 0xa1, 0x4d, 0x17, 0x02, (byte) 0xc5, 0x00, (byte) 0x14,
//                            0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, (byte) 0xc6, 0x00, 0x00, 0x04, (byte) 0xbc, 0x00, 0x00, 0x00, 0x7c, 0x62, (byte) 0xa1, 0x4d, 0x17};

                    byte[] dat = new byte[]{0x03,0x00,0x00,0x01,0x03,(byte)0xc5,0x00,(byte)0x14,0x00,0x00,0x00,0x03,
                            0x00,0x00,0x01,(byte)0xc6,0x00,0x00,0x04,(byte)0xbc,0x00,0x00,0x00,0x7c,0x62,(byte)0xa1,0x4d,0x17};


                    // 异常
//                byte[] dat = new byte[]{0x03,0x00,0x00,0x03,0x03,(byte)0xc5,0x00,(byte)0x14,0x00,
//                        0x00,0x00,0x03,0x00,0x00,0x01,(byte)0xc6,0x00,0x00,0x04,
//                        (byte)0xbc,0x00,0x00,0x00,0x7c,0x62,(byte)0xa1,0x4d,0x17,0x01,(byte)0xc5,0x00,
//                        (byte)0x14,0x00,0x00,0x00,0x03,0x00,0x00,0x01,(byte)0xc6,0x00,0x00,0x04,(byte)0xbc,
//                        0x00,0x00,0x00,0x7c,0x62,(byte)0xa1,0x4d,0x17,0x02,(byte)0xc5,0x00,(byte)0x14,
//                        0x00,0x00,0x00,0x03,0x00,0x00,0x01,(byte)0xc6,0x00,0x00,0x04,(byte)0xbc,0x00,0x00,0x00,0x7c,0x62,(byte)0xa1,0x4d,0x17};

                    int comSeq = x;
                    int ctlId = 0X0005;

                    x++;
                    new SendInfoTask().execute(CommonDefine.RECORD_SEND_FLAG, MakeFrame(dat, dat.length, comSeq, ctlId));
                }
            }
        });
    }

    public String MakeFrame(byte[] dat, int datSize, int comSeq, int ctlId){

        byte[] pFrm = new byte[datSize + 15];

        // int ctlId = 0X0006;  // 制御ID
        byte bcc  = 0;

        String serial = null;

        /*
        2. フレーム作成
         *	+----------+----------+----------+----------+----------+----------+----------+----------+----------+
         *	|ＳＴＸ     |データ長   |データ長   |通番      |車両番号   |制御ＩＤ   |データ部   |ＢＣＣ    |ＥＴＸ     |
         *	|(0x02)	   |          |補数       |          |          |          |ＭＡＸ     |         |(0x03)    |
         *	|１バイト   |２バイト   |２バイト   |２バイト   |４バイト   |２バイト   |4096バイト |１バイト  |１バイト   |
         *	+----------+----------+----------+----------+----------+----------+----------+----------+----------+
         *	データ長 	= 通番 + 車両番号 + 制御ＩＤ	+ データ部 		+ ＢＣＣ
         *	ＢＣＣ 		= データ長	+ データ長補数 	+ 制御ＩＤ	+ データ部
         */
        // 2.1 ＳＴＸ設定
        pFrm[0] = 0x02; //SysCmdDefine.SYS_FRAME_STX;

        //2.2 データ長設定
        pFrm[1] = (byte) ((8 + datSize + 1) / 0x100);
        pFrm[2] = (byte) ((8 + datSize + 1) % 0x100);

        //2.3 データ長補数設定
        pFrm[3] = (byte) ((0x10000 - ((pFrm[1] & 0xff ) * 0x100 + (pFrm[2] & 0xff ))) / 0x100);
        pFrm[4] = (byte) ((0x10000 - ((pFrm[1] & 0xff ) * 0x100 + (pFrm[2] & 0xff ))) % 0x100);

        //2.4 通番設定
        pFrm[6] = (byte) ( (comSeq) & 0xff );
        pFrm[5] = (byte) ( (comSeq >> 8) & 0xff );

        //2.5 シリアル番号設定
        if( serial == null ) {
            serial = "0";
        }
        CommonDefine.memCpy(pFrm, 7, Long.parseLong(serial), 4);

        //2.6 制御ＩＤ設定
        CommonDefine.memCpy(pFrm, 11, ctlId, 2);

        //2.7 データ部設定
        CommonDefine.sysArryCopy( dat, 0, pFrm, 13, datSize );
        int len = 15 + datSize;

        //2.8 ＢＣＣ加算
        for (int icnt = 1; icnt < (len - 2); icnt++){
            bcc += pFrm[icnt];
        }
        bcc = (byte) (0 - bcc);
        pFrm[len - 2] = bcc;

        //2.9 ＥＴＸ設定
        pFrm[len - 1] = 0x03; //SysCmdDefine.SYS_FRAME_ETX;					// ＥＴＸ設定

        /*  数据帧组装完毕*/

        String result="";

        // byte数组 转 16进制 String
        for (int i = 0; i < pFrm.length; i++) {
            result+=Integer.toHexString((pFrm[i] & 0xFF) | 0x100).toUpperCase().substring(1, 3) + " ";
        }

        return result.trim();
    }

    public void Init() {
//        statusLabel = (TextView) this.findViewById(R.id.textView1);
//        btnConnect = (Button) this.findViewById(R.id.button3);
//        btnSend = (Button) this.findViewById(R.id.button4);
//        btnQuit = (Button) this.findViewById(R.id.button5);
//        etSend = (EditText) this.findViewById(R.id.editText1);
//        etReceived = (EditText) this.findViewById(R.id.editText2);
//        etSend2 = (EditText) this.findViewById(R.id.editText3);
//
//        btnReturn = (Button) this.findViewById(R.id.button6);
//        btnParamRead = (Button) this.findViewById(R.id.button7);
//        btnParamWrite = (Button) this.findViewById(R.id.button8);
//        btnRecordWrite = (Button) this.findViewById(R.id.button9);
    }

    public void InitBluetooth() {
        //得到一个蓝牙适配器
        mBluetoothAdapter = BluetoothMain.getInstance().getmBluetoothAdapter();
        if (mBluetoothAdapter == null) {
            Toast.makeText(this, "不支持蓝牙", Toast.LENGTH_LONG).show();
            finish();
            return;
        }
    }

    //连接蓝牙设备的异步任务
    class ConnectTask extends AsyncTask<String, String, String> {
        @Override
        protected String doInBackground(String... params) {
            // TODO Auto-generated method stub
            BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(params[0]);

            //                btSocket = device.createRfcommSocketToServiceRecord(MY_UUID);
//
//                btSocket.connect();

            Log.e("error", "ON RESUME: BT connection established, data transfer link open.");

            //取消搜索
//            mBluetoothAdapter.cancelDiscovery();

            try {
                outStream = btSocket.getOutputStream();

            } catch (IOException e) {
                Log.e("error", "ON RESUME: Output stream creation failed.", e);
                return "Socket 流创建失败";
            }

            return "蓝牙连接正常,Socket 创建成功";
        }

        @Override    //这个方法是在主线程中运行的，所以可以更新界面
        protected void onPostExecute(String result) {
            // TODO Auto-generated method stub

            //连接成功则启动监听
            rThread = new ReceiveThread();

            rThread.start();

            statusLabel.setText(result);

            super.onPostExecute(result);
        }
    }

    //发送数据到蓝牙设备的异步任务
    class SendInfoTask extends AsyncTask<String, String, String> {

        @Override
        protected void onPostExecute(String result) {
            // TODO Auto-generated method stub
            super.onPostExecute(result);

            statusLabel.setText(result);

            //将发送框清空
            etSend.setText("");
        }

        @Override
        protected String doInBackground(String... arg0) {
            // TODO Auto-generated method stub
            byte[] msgBuffer = null;

            if (btSocket == null) {
                return "还没有创建连接";
            }

            switch (arg0[0]){
                case CommonDefine.MESSAGE_SEND_FLAG:
                    if (arg0[1].length() > 0){//不是空白串
                        msgBuffer = arg0[1].getBytes();
                    }
                    break;
                case CommonDefine.PARAM_READ_SEND_FLAG:
                case CommonDefine.PARAM_WRITE_SEND_FLAG:
                case CommonDefine.RECORD_SEND_FLAG:

                    if (arg0[1].length() > 0){
                        String[] tmpArray = arg0[1].split(" ");
                        msgBuffer = new byte[tmpArray.length];

                        for (int i=0;i<tmpArray.length;i++){
                            msgBuffer[i] = (byte)(Integer.decode(("0x" + tmpArray[i])) & 0xff);
                        }
                    }
                    break;
                default:
                    break;
            }

            if (msgBuffer != null && outStream != null){
                try {
                    // 送信内容设置
                    etSend2.setText(CommonDefine.splitDataPart(CommonDefine.bytesToHex(msgBuffer,msgBuffer.length)));

                    Log.d("sch", "snd size="+msgBuffer.length+"  data=" + CommonDefine.bytesToHex(msgBuffer, msgBuffer.length));

                    //  将msgBuffer中的数据写到outStream对象中
                    outStream.write(msgBuffer);
                    return "发送成功";
                } catch (Exception e) {
                    Log.e("error", "ON RESUME: Exception during write.", e);
                    return "发送失败";
                }
            }else {
                return "没有数据";
            }
        }
    }

    //从蓝牙接收信息的线程
    class ReceiveThread extends Thread {

        int rcvSize;

        @Override
        public void run() {

            while (btSocket != null) {
                //定义一个存储空间buff
                byte[] buff = new byte[1024];
                try {
                    if (btSocket.isConnected()) {
                        InputStream inStream = btSocket.getInputStream();
                        rcvSize = inStream.read(buff); //读取数据存储在buff数组中

                        Log.d("sch", "rcv data=" + CommonDefine.bytesToHex(buff, rcvSize));

                        ReceiveData = CommonDefine.splitDataPart(CommonDefine.bytesToHex(buff, rcvSize));

                        Message msg = Message.obtain();
                        msg.what = CommonDefine.RCV_MESSAGE_EXIST;
                        handler.sendMessage(msg);  //发送消息:系统会自动调用handleMessage( )方法来处理消息
                    }
                } catch (IOException e) {

                    e.printStackTrace();
                    break;
                }
            }
        }


    }

    //更新界面的Handler类
    class MyHandler extends Handler {

        @Override
        public void handleMessage(Message msg) {

            switch (msg.what) {
                case CommonDefine.RCV_MESSAGE_EXIST:
                    etReceived.setText(ReceiveData);
                    break;
            }
        }
    }

    @Override
    protected void onDestroy() {
        // TODO Auto-generated method stub
        super.onDestroy();

        try {
            if (rThread != null) {

                if(btSocket != null) {
                    btSocket.close();
                    btSocket = null;
                }

                rThread.join();
            }

            this.finish();

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}